(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{502:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"一-概念理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-概念理解"}},[s._v("#")]),s._v(" 一，概念理解")]),s._v(" "),n("p",[s._v("面向对象是相对于面向过程来说的，程序可以说是算法+数据两部分组成，面向过程会偏向于算法，而面向对象会偏向于数据。")]),s._v(" "),n("p",[n("strong",[s._v("在要实现某个功能，面向对象和面向过程的区别？")])]),s._v(" "),n("ul",[n("li",[s._v("面向过程：是去想从开始到结束应该有哪些连续的步骤，把任务分解成一个个带参数的函数，然后再去执行这些函数")]),s._v(" "),n("li",[s._v("面向对象：是去分析参与问题的有哪些实体，把事物抽象成对象的概念，通过调用这些实体的属性和方法解决问题")])]),s._v(" "),n("p",[s._v("python属于典型的面向对象的编程语言，比较典型的如前面各数据类型的操作方法，它是通过类和对象的方法来组织代码的完成，而不是像面向过程语言那样直接调用函数，像调用int()其实也是类的实例化过程")]),s._v(" "),n("h2",{attrs:{id:"二-类的概念与定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-类的概念与定义"}},[s._v("#")]),s._v(" 二，类的概念与定义")]),s._v(" "),n("p",[s._v("如在学校中有学生和老师两类人，这两类人有各自的身高、体重、年龄等这类属性，也有各自的平时要做的事，如讲课、上课、写作业、批改作业等。")]),s._v(" "),n("p",[s._v("类似的，在python里面也定义了类")]),s._v(" "),n("ul",[n("li",[s._v("类：具有相同属性和方法的对象的集合。")]),s._v(" "),n("li",[s._v("对象：对象就是类的实例。对象有属性和方法")]),s._v(" "),n("li",[s._v("方法：就是类中定义的函数")]),s._v(" "),n("li",[s._v("属性：包含类属性和实例属性，类属性就是类中所有对象共有的属性，实例属性是实例化对象的属性；同名时实例对象优先调用实例属性")])]),s._v(" "),n("p",[s._v("那么在python里面如何定义学生和老师这两类人呢")]),s._v(" "),n("p",[s._v("1，使用class定义一个类名，如下，定义Student（一般首字母大写）类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Student：\n    pass\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("2，实例化，调用定义好的类，类名+()")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Student：\n    pass\n\nStudent()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("3，定义类的实例属性，借用魔术方法（以__开头且以__结尾的方法，会自动调用） ：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("构造方法__new__(cls)")]),s._v("：当实例化的时候，会自动调用__new__(cls)方法，把需要实例化的类对象作为实参传给cls形参，然后__new__再根据该类对象创建一个实例对象。（"),n("em",[s._v("默认所有类都继承objext类，而object类中有定义了__new__，所以一般在类的定义中不写也是可以的")]),s._v("）")]),s._v(" "),n("li",[n("strong",[s._v("初始化方法__init__(self)")]),s._v("：再自动调用__init__(self)方法，把刚创建的实例对象作为实参传递给self形参，然后__init__再对实例对象进行属性初始化，最后再把__new__把属性初始化之后的实例对象返回。（"),n("em",[s._v("默认所有类都继承objext类，而object类中有定义了__init__，但是没有任何属性初始化，所以在创建类的时候如果要自定义属性还是要重新自己写")]),s._v("）")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Student：\n\n#实例属性定义 \n'''\ndef __init(self,想定义的属性名1，属性名2...):\n    self.属性1名称 = 想定义的属性名1 #即表示把传入的实参赋值给self.属性1名称\n'''\n    def __init__(self, name, age, weight): #在self后面加上你想定义的属性名称\n        self.name = name #把传入的name属性值赋值给对象self.name属性，即完成类的属性定义\n        self.age = age\n        self.weight = weight\n\n#实例化的时候注意传入属性对应的值\nstu1 = Student('zhangsan', 14, 8)\nstu2 = Student('jige', 15, 6)\nprint(stu1)\nprint(stu2)\n\n#实例属性调用，通过实例对象去调用，修改也可以这么去改\nprint(stu1.name)\nprint(stu2.name)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("输出为")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<__main__.Student object at 0x000001F54BE22FD0>\n<__main__.Student object at 0x000001F54BE22640>\n\nzhangsan\njige\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("如上例中，即完成了一个含有name、age、weight三个属性的Student类，并且完成了‘zhangsan’和‘jige’的实例化")]),s._v(" "),n("p",[s._v("4，定义类属性\n对于类中所有对象共有的属性，需要定义类属性")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Student：\n    \n    #类属性\n    school = \"翻斗大街中学\"\n \n    #实例属性\n    def __init__(self, name, age, weight): #在self后面加上你想定义的属性名称\n        self.name = name #把传入的name属性值赋值给对象self.name属性，即完成类的属性定义\n        self.age = age\n        self.weight = weight\n\nstu1 = Student('zhangsan', 14, 8)\nstu2 = Student('jige', 15, 6)\nprint(stu1)\nprint(stu2)\n\n## 类属性调用：既可以直接用类的名称去调用，也可以用实例对象去调用；修改只能用类名称去修改\nprint(Student.school)\nprint(stu1.school)\nprint(stu2.school)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("输出为")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<__main__.Student object at 0x000001F54BE68FA0>\n<__main__.Student object at 0x000001F54BE68EE0>\n翻斗大街中学\n翻斗大街中学\n翻斗大街中学\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("如上例中，对于Student这个类，即定义了一个school类属性")]),s._v(" "),n("p",[s._v("5，定义对象方法")]),s._v(" "),n("p",[s._v("直接在类中定义函数，这个函数就是这个类中所有对象可调用的类方法，传参可以使用self，从而可以使用对象属性")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Student:\n    \n    #类属性\n    school = \"翻斗大街中学\"\n \n    #实例属性\n    def __init__(self, name, age, weight): #在self后面加上你想定义的属性名称\n        self.name = name #把传入的name属性值赋值给对象self.name属性，即完成类的属性定义\n        self.age = age\n        self.weight = weight\n        \n    #定义功能，传参为self形参，那么就可以使用对象属性\n    def study(self):\n        print(f'{self.name}是学生')\n        print(f'{self.age}是他的年龄')\n\nstu1 = Student('zhangsan', 14, 8)\nstu2 = Student('jige', 15, 6)\nprint(stu1)\nprint(stu2)\n\n#调用对象方法\nstu1.study()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[s._v("输出为")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<__main__.Student object at 0x000001F54BE22F40>\n<__main__.Student object at 0x000001F54BE22FD0>\nzhangsan是学生\n14是他的年龄\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("6，定义类方法")]),s._v(" "),n("p",[s._v("和对象方法的区别就传入形参需要是类属性，另外要用装饰器@classmethod来声明是定义的类方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Student:\n    \n    #类属性\n    school = \"翻斗大街中学\"\n \n    #实例属性\n    def __init__(self, name, age, weight): #在self后面加上你想定义的属性名称\n        self.name = name #把传入的name属性值赋值给对象self.name属性，即完成类的属性定义\n        self.age = age\n        self.weight = weight\n\n    #定义类方法\n    @classmethod\n    def sleep(cls):\n        print(f'{cls.school} will sleep')\n\nstu1 = Student('zhangsan', 14, 8)\nstu2 = Student('jige', 15, 6)\nprint(stu1)\nprint(stu2)\n\n#调用类方法，既可以直接用类名实参，也可以用实例对象\nStudent.sleep()\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("输出为")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<__main__.Student object at 0x000001F54BE22670>\n<__main__.Student object at 0x000001F54BE22D90>\nzhangsan是学生\n14是他的年龄\n翻斗大街中学 will sleep\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"三-面向对象的三大特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-面向对象的三大特性"}},[s._v("#")]),s._v(" 三，面向对象的三大特性")]),s._v(" "),n("h3",{attrs:{id:"_1-封装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-封装"}},[s._v("#")]),s._v(" 1，封装")]),s._v(" "),n("p",[s._v("可以在属性或方法前面加两个下划线开头，使其变为私有属性或方法，意思就是只能在类的内部调用，不能在类的外部直接引用，但可以通过非私有方法来进行访问，如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Teacher:\n    def __init__(self, name, age):\n        self.name = name\n        self.__age = age #定义age为私有属性\n\n    #使用非私有方法访问私有属性\n    def showAge(self):\n        print(f'{self.name}有{self.__age}岁了')\n     \n     \ntea1 = Teacher('aji',35)\nprint(tea1.name)\n# print(tea1.__age) #执行发现会报错说找不到此属性\ntea1.showAge()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("输出为")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("aji\naji有35岁了\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_2-继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-继承"}},[s._v("#")]),s._v(" 2，继承")]),s._v(" "),n("p",[s._v("所有的类都继承object类；子类继承父类后，会拥有父类的非私有属性和方法；在程序的执行中，会先找自己的，再去找父类的")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Teacher:\n    def __init__(self, name, age):\n        self.name = name\n        self.__age = age\n\n\n    def showAge(self):\n        print(f'{self.name}有{self.__age}岁了')\n\n#使用Tea01继承Teacher\nclass Tea01(Teacher):\n    pass\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"_3-多态性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-多态性"}},[s._v("#")]),s._v(" 3，多态性")]),s._v(" "),n("p",[s._v("不同对象对同一消息做出不同响应，有多个类继承，并各自声明了同一个方法，那么在调用不同类同一个方法的时候，会执行各自定义的方法逻辑，如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Animal:  \ndef speak(self):  \npass  \n  \nclass Dog(Animal):  \ndef speak(self):  \nreturn "汪汪！"  \n  \nclass Cat(Animal):  \ndef speak(self):  \nreturn "喵喵！"  \n  \ndef animal_speak(animal):  \nprint(animal.speak())  \n  \ndog = Dog()  \ncat = Cat()  \n  \nanimal_speak(dog) # 输出 "汪汪！"  \nanimal_speak(cat) # 输出 "喵喵！"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("在这个例子中，定义了一个父类 "),n("code",[s._v("Animal")]),s._v(" 和两个子类 "),n("code",[s._v("Dog")]),s._v(" 和 "),n("code",[s._v("Cat")]),s._v("，它们都实现了 "),n("code",[s._v("speak()")]),s._v(" 方法。在 "),n("code",[s._v("animal_speak()")]),s._v(" 函数中，传入任意一个 Animal 类型的对象，都会调用该对象的 "),n("code",[s._v("speak()")]),s._v(" 方法并输出结果。在实例化 "),n("code",[s._v("Dog")]),s._v(" 和 "),n("code",[s._v("Cat")]),s._v(" 对象后，分别调用了它们的 "),n("code",[s._v("speak()")]),s._v(" 方法，输出了不同的声音，这就是多态。")])])}),[],!1,null,null,null);n.default=t.exports}}]);